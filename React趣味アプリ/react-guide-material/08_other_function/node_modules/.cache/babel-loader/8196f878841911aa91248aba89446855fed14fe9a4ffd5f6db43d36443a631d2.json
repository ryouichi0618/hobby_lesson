{"ast":null,"code":"var _jsxFileName = \"/Users/sekineryouichi/\\u8DA3\\u5473\\u30A2\\u30D5\\u309A\\u30EA/React\\u8DA3\\u5473\\u30A2\\u30D5\\u309A\\u30EA/react-guide-material/08_other_function/src/030_useRef/end/Example.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useRef } from \"react\";\n\n/* POINT useRefでDOMを取得\nrefオブジェクトをref属性に渡すとDOMを参照することができます。\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Case1 = () => {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const inputRef = useRef();\n\n  // console.log(inputRef);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B91\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      value: value,\n      onChange: e => setValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => inputRef.current.focus(),\n      children: \"\\u30A4\\u30F3\\u30D7\\u30C3\\u30C8\\u8981\\u7D20\\u3092\\u30D5\\u30A9\\u30FC\\u30AB\\u30B9\\u3059\\u308B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n// POINT 動画の再生・停止を制御\n_s(Case1, \"lXp8zU3IuMqLZ2UKZ+0r3IvveOM=\");\n_c = Case1;\nconst Case2 = () => {\n  _s2();\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B92\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      style: {\n        maxWidth: \"100%\"\n      },\n      ref: videoRef,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"./sample.mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (playing) {\n          videoRef.current.pause();\n        } else {\n          videoRef.current.play();\n        }\n        setPlaying(prev => !prev);\n      },\n      children: playing ? \"Stop\" : \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s2(Case2, \"+KbWBPCf0bUczd5+j2BtpYMF674=\");\n_c2 = Case2;\nconst createTimeStamp = () => new Date().getTime();\n\n/* POINT useRefは再レンダリングされません。\n書き換え可能な情報としてコンポーネントに保持させておくことができます。\nstate は更新されるごとに再レンダーされますが、refオブジェクトの中身が変わっても再レンダーが走ることはありません。\n*/\nconst Case3 = () => {\n  _s3();\n  const [timeStamp, setValue] = useState(createTimeStamp());\n  const ref = useRef(createTimeStamp());\n  const updateState = () => {\n    setValue(createTimeStamp());\n  };\n  const updateRef = () => {\n    /* コンソールを見るとブラウザの表示と、ref.currentの中身が異なることを確認できます */\n    ref.current = createTimeStamp();\n    console.log(\"ref.current -> \", ref.current);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B93\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"state: \", timeStamp, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateState,\n        children: \"\\u66F4\\u65B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ref: \", ref.current, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateRef,\n        children: \"\\u66F4\\u65B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n/* POINT refを使うべきタイミング\nReactは一般的に、propsを通して親から子へ作用させる、というデータフローが原則です。\nrefを使ってコンポーネントに作用を起こすことは、その原則を崩す行為なので多用は避けましょう。\n\nrefに適した使用例は以下の場合とされています。\n- フォームへのフォーカス、テキストの選択、メディア（動画・音声）の再生の管理\n- アニメーションの発火\n- サードパーティの DOM や、React管理外のDOMの埋め込み\n*/\n_s3(Case3, \"05QoAIf8fZod5WRr+igOAGdl5cY=\");\n_c3 = Case3;\nconst Example = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Case1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Case2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Case3, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c4 = Example;\nexport default Example;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Case1\");\n$RefreshReg$(_c2, \"Case2\");\n$RefreshReg$(_c3, \"Case3\");\n$RefreshReg$(_c4, \"Example\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Case1","_s","value","setValue","inputRef","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","e","target","onClick","current","focus","_c","Case2","_s2","playing","setPlaying","videoRef","style","maxWidth","src","pause","play","prev","_c2","createTimeStamp","Date","getTime","Case3","_s3","timeStamp","updateState","updateRef","console","log","_c3","Example","_c4","$RefreshReg$"],"sources":["/Users/sekineryouichi/趣味アプリ/React趣味アプリ/react-guide-material/08_other_function/src/030_useRef/end/Example.js"],"sourcesContent":["import { useState, useRef } from \"react\";\n\n/* POINT useRefでDOMを取得\nrefオブジェクトをref属性に渡すとDOMを参照することができます。\n*/\nconst Case1 = () => {\n  const [value, setValue] = useState(\"\");\n  const inputRef = useRef();\n\n  // console.log(inputRef);\n\n  return (\n    <div>\n      <h3>ユースケース1</h3>\n      <input\n        type=\"text\"\n        ref={inputRef}\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <button onClick={() => inputRef.current.focus()}>\n        インプット要素をフォーカスする\n      </button>\n    </div>\n  );\n};\n\n// POINT 動画の再生・停止を制御\nconst Case2 = () => {\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef();\n\n  return (\n    <div>\n      <h3>ユースケース2</h3>\n      <video style={{ maxWidth: \"100%\" }} ref={videoRef}>\n        <source src=\"./sample.mp4\"></source>\n      </video>\n      <button\n        onClick={() => {\n          if (playing) {\n            videoRef.current.pause();\n          } else {\n            videoRef.current.play();\n          }\n\n          setPlaying((prev) => !prev);\n        }}\n      >\n        {playing ? \"Stop\" : \"Play\"}\n      </button>\n    </div>\n  );\n};\n\nconst createTimeStamp = () => new Date().getTime();\n\n/* POINT useRefは再レンダリングされません。\n書き換え可能な情報としてコンポーネントに保持させておくことができます。\nstate は更新されるごとに再レンダーされますが、refオブジェクトの中身が変わっても再レンダーが走ることはありません。\n*/\nconst Case3 = () => {\n  const [timeStamp, setValue] = useState(createTimeStamp());\n  const ref = useRef(createTimeStamp());\n\n  const updateState = () => {\n    setValue(createTimeStamp());\n  };\n\n  const updateRef = () => {\n    /* コンソールを見るとブラウザの表示と、ref.currentの中身が異なることを確認できます */\n    ref.current = createTimeStamp();\n    console.log(\"ref.current -> \", ref.current);\n  };\n  return (\n    <div>\n      <h3>ユースケース3</h3>\n      <p>\n        state: {timeStamp}\n        <button onClick={updateState}>更新</button>\n      </p>\n      <p>\n        ref: {ref.current}\n        <button onClick={updateRef}>更新</button>\n      </p>\n    </div>\n  );\n};\n\n/* POINT refを使うべきタイミング\nReactは一般的に、propsを通して親から子へ作用させる、というデータフローが原則です。\nrefを使ってコンポーネントに作用を起こすことは、その原則を崩す行為なので多用は避けましょう。\n\nrefに適した使用例は以下の場合とされています。\n- フォームへのフォーカス、テキストの選択、メディア（動画・音声）の再生の管理\n- アニメーションの発火\n- サードパーティの DOM や、React管理外のDOMの埋め込み\n*/\nconst Example = () => {\n  return (\n    <>\n      <Case1 />\n      <Case2 />\n      <Case3 />\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}