{"ast":null,"code":"var _jsxFileName = \"/Users/sekineryouichi/\\u8DA3\\u5473\\u30A2\\u30D5\\u309A\\u30EA/React\\u8DA3\\u5473\\u30A2\\u30D5\\u309A\\u30EA/react-guide-material/07_styling_component/src/010_inline_style/end/Example.js\",\n  _s = $RefreshSig$();\n/* POINT\n・再利用性が低い\n・疑似要素やメディアクエリが使用できない\n・レンダリングの度に計算されるのでパフォーマンスが劣る\n・動的で頻繁に計算されるスタイルの適用\n */\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  _s();\n  const [isSelected, setIsSelected] = useState(false);\n  const clickHandler = () => setIsSelected(prev => !prev);\n\n  /* POINT インラインスタイルのメリットとデメリット\n  メリット\n    直感的に記述することができる。\n  デメリット\n    再レンダリングの度に値が計算されるのでパフォーマンス的に優れていない\n    要素に直接記述しているので詳細度が一番高くなり、cssのスタイルが何も効かない\n    疑似セレクタやメディアクエリにも対応していないため、実装しようとするとわかりづらいコードになってしまう\n  */\n\n  /* POINT style属性に適応させるスタイルをオブジェクトで記述します */\n  const style = {\n    margin: \"auto\",\n    \"border-radius\": \"9999px\",\n    border: \"none\",\n    display: \"block\",\n    /* POINT 単位を書かない場合\n    単位を書かずに文字列ではなく数字を与えてあげると、reactが自動で解釈し値にpxを付けてくれます。 */\n    width: 120,\n    height: 60,\n    fontWeight: \"bold\",\n    cursor: \"pointer\",\n    /* POINT 三項演算子を使用して isSelected が true の場合は 'pink' false の場合は空文字( '' ) を与えています。\n    valueに空文字を与えた場合プロパティは適応されません。 */\n    backgroundColor: isSelected ? \"pink\" : \"\"\n    /* POINT 直接記述することによって可読性が大きく低下するので、可読性が向上する方法を考えて実装してみよう */\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      style: style,\n      onClick: clickHandler,\n      children: \"\\u30DC\\u30BF\\u30F3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: isSelected && \"クリックされました。\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Example, \"5DtxMhs0n+JsbGWNZftSFTxrVZQ=\");\n_c = Example;\nexport default Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Example","_s","isSelected","setIsSelected","clickHandler","prev","style","margin","border","display","width","height","fontWeight","cursor","backgroundColor","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","_c","$RefreshReg$"],"sources":["/Users/sekineryouichi/趣味アプリ/React趣味アプリ/react-guide-material/07_styling_component/src/010_inline_style/end/Example.js"],"sourcesContent":["/* POINT\n・再利用性が低い\n・疑似要素やメディアクエリが使用できない\n・レンダリングの度に計算されるのでパフォーマンスが劣る\n・動的で頻繁に計算されるスタイルの適用\n */\n\nimport { useState } from \"react\";\n\nconst Example = () => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const clickHandler = () => setIsSelected(prev => !prev);\n\n  /* POINT インラインスタイルのメリットとデメリット\n  メリット\n    直感的に記述することができる。\n  デメリット\n    再レンダリングの度に値が計算されるのでパフォーマンス的に優れていない\n    要素に直接記述しているので詳細度が一番高くなり、cssのスタイルが何も効かない\n    疑似セレクタやメディアクエリにも対応していないため、実装しようとするとわかりづらいコードになってしまう\n  */\n\n  /* POINT style属性に適応させるスタイルをオブジェクトで記述します */\n  const style = {\n    margin: \"auto\",\n    \"border-radius\": \"9999px\",\n    border: \"none\",\n    display: \"block\",\n\n    /* POINT 単位を書かない場合\n    単位を書かずに文字列ではなく数字を与えてあげると、reactが自動で解釈し値にpxを付けてくれます。 */\n    width: 120,\n    height: 60,\n    fontWeight: \"bold\",\n    cursor: \"pointer\",\n    /* POINT 三項演算子を使用して isSelected が true の場合は 'pink' false の場合は空文字( '' ) を与えています。\n    valueに空文字を与えた場合プロパティは適応されません。 */\n    backgroundColor: isSelected ? \"pink\" : \"\",\n    /* POINT 直接記述することによって可読性が大きく低下するので、可読性が向上する方法を考えて実装してみよう */\n  };\n\n\n  return (\n    <>\n      <button style={style} onClick={clickHandler}>\n        ボタン\n      </button>\n      <div style={{ textAlign: \"center\" }}>{isSelected && \"クリックされました。\"}</div>\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMS,YAAY,GAAGA,CAAA,KAAMD,aAAa,CAACE,IAAI,IAAI,CAACA,IAAI,CAAC;;EAEvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;EACA,MAAMC,KAAK,GAAG;IACZC,MAAM,EAAE,MAAM;IACd,eAAe,EAAE,QAAQ;IACzBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE,OAAO;IAEhB;AACJ;IACIC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE,MAAM;IAClBC,MAAM,EAAE,SAAS;IACjB;AACJ;IACIC,eAAe,EAAEZ,UAAU,GAAG,MAAM,GAAG;IACvC;EACF,CAAC;;EAGD,oBACEL,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA;MAAQS,KAAK,EAAEA,KAAM;MAACU,OAAO,EAAEZ,YAAa;MAAAW,QAAA,EAAC;IAE7C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACTvB,OAAA;MAAKS,KAAK,EAAE;QAAEe,SAAS,EAAE;MAAS,CAAE;MAAAN,QAAA,EAAEb,UAAU,IAAI;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO;EAAA,gBACtE;AAEP,CAAC;AAACnB,EAAA,CA1CID,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AA4Cb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}